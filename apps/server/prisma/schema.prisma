// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  username        String?  @unique
  profileImage    String?
  role            UserRole @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Authentication related fields
  password String? // Hashed password for email/password auth
  accounts Account[]
  sessions Session[]

  // Social media profiles
  linkedinUrl String?
  twitterUrl  String?
  blueskyUrl  String?
  githubUrl   String?

  // User's content
  posts Post[]
  notes Note[]

  // Email verification
  verificationTokens VerificationToken[]

  // Password reset
  passwordResetTokens PasswordResetToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String // oauth, email, etc
  provider          String // google, github, email, etc
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           String    @id @default(cuid())
  content      String    @db.Text
  platform     Platform
  published    Boolean   @default(false)
  scheduledFor DateTime?
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Metadata
  title    String?
  tags     String[]
  imageUrl String?

  // Analytics
  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  // Relations
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  noteId String?
  note   Note?   @relation(fields: [noteId], references: [id])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(false)
  status    NoteStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts  Post[]
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Platform {
  LINKEDIN
  TWITTER
  BLUESKY
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
  TWITTER
}

enum NoteStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}
